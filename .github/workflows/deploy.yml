name: Deploy

on:
  release:
    types: [published]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Frontend
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/otomatik-frontend
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            latest

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          IMAGE_TAG: ${{ github.event.release.tag_name }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          # Ensure network exists
          ssh $SERVER_USER@$SERVER_HOST "docker network create otomatik-network || true"
          
          # Copy deployment files
          scp docker-compose.yml $SERVER_USER@$SERVER_HOST:$DEPLOY_PATH/
          
          # Copy .env file
          echo "${{ secrets.ENV_FILE }}" > .env
          scp .env $SERVER_USER@$SERVER_HOST:$DEPLOY_PATH/
          
          # Deploy using Docker with specific image tag
          ssh $SERVER_USER@$SERVER_HOST "cd $DEPLOY_PATH && \
            export IMAGE_TAG=$IMAGE_TAG && \
            export DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME && \
            docker compose pull && \
            docker compose up -d && \
            docker system prune -f" 